	  SPIM MIPS Simulator

http://www.cs.wisc.edu/~larus/spim.html

	      James Larus
      Computer Sciences Department
	University of Wisconsin
	   larus@cs.wisc.edu

Current Address: Microsoft Research (larus@microsoft.com)


SPIM is a self-contained simulator that
will run MIPS32 assembly language
programs. It reads and immediately
executes assembly language code for this
processor. SPIM provides a simple
debugger and minimal set of operating
system services. SPIM does not execute
binary (compiled) programs.

SPIM implements almost the entire MIPS32
assembler-extended instruction set. (It
omits some complex floating point
comparisons and rounding modes and
details of the memory system page
tables.) The MIPS architecture has
several variants that differ in minor
ways (in particular, the MIPS64), which
means that SPIM will not run programs
compiled for recent SGI processors. MIPS
compilers also generate a number of
assembler directives that SPIM cannot
process. These directives can be safely
deleted.

Earlier versions of SPIM (before 7.0)
implemented the MIPS-I instruction set
used on the MIPS R2000/R3000
computers. This architecture is long
obsolete (though, has never been
surpassed for its simplicity and
elegance), so SPIM now supports the more
modern MIPS32 architecture, which
contains a large number of rarely useful
instructions. MIPS code from earlier
versions of SPIM should run without
changes, except code that handles
exceptions and interrupts. This part of
the architecture changed over time (and
was poorly implemented in earlier
versions of SPIM. Code that handles
exceptions will need to be
updated. Examples of the code are in
exceptions.s and Tests/tt.io.s.

SPIM comes with complete source code and
documentation. It also include a torture
test to verify a port to a new machine.

SPIM implements both a simple,
terminal-style interface and a visual
windowing interface. On Unix, the spim
program provides the terminal interface
and the xspim program provides the X
window interface. On PCs, the spim
program provides the console interface
and PCSpim provides the Windows
interface.


SPIM is copyrighted by me and can be
freely used for non-commercial purposes.
You can get source and compiled files
from:

 http://www.cs.wisc.edu/~larus/spim.html

SPIM comes with documentation, however
Appendix A of Hennessy & Patterson,
"Computer Organization and Design: The
Hardware/Software Interface," Morgan
Kaufman, 1993 is a far better
introduction to the software.


James Larus
Computer Sciences Department
1210 West Dayton Street
University of Wisconsin
Madison, WI 53706
larus@cs.wisc.edu

Current Address: Microsoft Research, larus@microsoft.com
